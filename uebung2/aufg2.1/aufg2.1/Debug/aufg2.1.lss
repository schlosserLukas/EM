
aufg2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000452  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000205  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e9  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e3  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000354  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  9e:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setLEDs>:
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	a9 01       	movw	r20, r18
  ac:	55 95       	asr	r21
  ae:	47 95       	ror	r20
  b0:	55 95       	asr	r21
  b2:	47 95       	ror	r20
}

void setLEDs(uint8_t counter){
	if(getBit(counter, 2)){
  b4:	40 ff       	sbrs	r20, 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <setLEDs+0x16>
		PORTD = setBit(0,PORTD0,PORTD);
  b8:	58 98       	cbi	0x0b, 0	; 11
  ba:	01 c0       	rjmp	.+2      	; 0xbe <setLEDs+0x18>
	}
	else{
		PORTD|=(1<<PORTD0);
  bc:	58 9a       	sbi	0x0b, 0	; 11
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
		PORTD = setBit(0,PORTD0,PORTD);
	}
	else{
		PORTD|=(1<<PORTD0);
	}
	if(getBit(counter,1)){
  c2:	20 ff       	sbrs	r18, 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <setLEDs+0x24>
		PORTD = setBit(0, PORTD1, PORTD);
  c6:	59 98       	cbi	0x0b, 1	; 11
  c8:	01 c0       	rjmp	.+2      	; 0xcc <setLEDs+0x26>
	}
	else{
		PORTD|=(1<<PORTD1);
  ca:	59 9a       	sbi	0x0b, 1	; 11
	}
	if(getBit(counter,0)){
  cc:	80 ff       	sbrs	r24, 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <setLEDs+0x2e>
		PORTD = setBit(0, PORTD6, PORTD);
  d0:	5e 98       	cbi	0x0b, 6	; 11
  d2:	08 95       	ret
	}
	else{
		PORTD|=(1<<PORTD6);
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	08 95       	ret

000000d8 <setStartValue>:
	
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
  d8:	89 b1       	in	r24, 0x09	; 9
	uint8_t a6Val = !getBit(PIND, PIND3);
  da:	79 b1       	in	r23, 0x09	; 9
	uint8_t a7Val = !getBit(PIND, PIND4);
  dc:	69 b1       	in	r22, 0x09	; 9
	
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	85 fb       	bst	r24, 5
  e2:	88 27       	eor	r24, r24
  e4:	80 f9       	bld	r24, 0


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
  e6:	89 27       	eor	r24, r25
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  e8:	76 95       	lsr	r23
  ea:	76 95       	lsr	r23
  ec:	76 95       	lsr	r23
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
  ee:	79 27       	eor	r23, r25
  f0:	47 2f       	mov	r20, r23
  f2:	41 70       	andi	r20, 0x01	; 1
  f4:	50 e0       	ldi	r21, 0x00	; 0


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	48 2b       	or	r20, r24
  fc:	84 2f       	mov	r24, r20
  fe:	8b 7f       	andi	r24, 0xFB	; 251
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
 100:	46 2f       	mov	r20, r22
 102:	42 95       	swap	r20
 104:	4f 70       	andi	r20, 0x0F	; 15

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
	uint8_t a7Val = !getBit(PIND, PIND4);
 106:	94 27       	eor	r25, r20
 108:	29 2f       	mov	r18, r25
 10a:	21 70       	andi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
	uint8_t a7Val = !getBit(PIND, PIND4);
	startValue=setBit(a5Val,0,startValue);
	startValue=setBit(a6Val,1,startValue);
	startValue=setBit(a7Val,2,startValue);
	return startValue;
}
 116:	82 2b       	or	r24, r18
 118:	08 95       	ret

0000011a <__vector_1>:




ISR(INT0_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
	running = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 01 01 	sts	0x0101, r24
	counter = startValue;
 12c:	80 91 02 01 	lds	r24, 0x0102
 130:	80 93 00 01 	sts	0x0100, r24
	
}
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_4>:

ISR(PCINT1_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	running = 0;
 162:	10 92 01 01 	sts	0x0101, r1
	counter = startValue;
 166:	80 91 02 01 	lds	r24, 0x0102
 16a:	80 93 00 01 	sts	0x0100, r24
	setLEDs(counter);
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <setLEDs>
	PORTD ^= (1<<PORTD7);
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 58       	subi	r24, 0x80	; 128
 176:	8b b9       	out	0x0b, r24	; 11
	
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <main>:
int main(void)
{
	
	counter|=1;
	counter|=1<<1;
	counter|=1<<2;
 19a:	80 91 00 01 	lds	r24, 0x0100
 19e:	87 60       	ori	r24, 0x07	; 7
 1a0:	80 93 00 01 	sts	0x0100, r24
	DDRD|=(1<<DDD0);//LED A1
 1a4:	50 9a       	sbi	0x0a, 0	; 10
	DDRD|=(1<<DDD1);//LED A4
 1a6:	51 9a       	sbi	0x0a, 1	; 10
	DDRD|=(1<<DDD6);//LED A7
 1a8:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<DDD7); //LED A3
 1aa:	57 9a       	sbi	0x0a, 7	; 10
	PORTD|=(1<<DDD5);//pullup widerstand 0
 1ac:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD|=(1<<DDD3);//pullup widerstand 1
 1ae:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD|=(1<<DDD4);//pullup widerstand 2
 1b0:	5c 9a       	sbi	0x0b, 4	; 11
	PORTC|=(1<<DDC3);//pullup widerstand 3 fuer Taster a3
 1b2:	43 9a       	sbi	0x08, 3	; 8
	PORTD|=(1<<DDD2);//pullup widerstand 4 fuer Taster a4
 1b4:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PORTD0);
 1b6:	58 9a       	sbi	0x0b, 0	; 11
	PORTD|=(1<<PORTD1),
 1b8:	59 9a       	sbi	0x0b, 1	; 11
	PORTD|=(1<<PORTD6);
 1ba:	5e 9a       	sbi	0x0b, 6	; 11
	
	// activate Interrupt
	EICRA &= ~((1<<ISC00)|(1<<ISC01));
 1bc:	e9 e6       	ldi	r30, 0x69	; 105
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8c 7f       	andi	r24, 0xFC	; 252
 1c4:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);
 1c6:	80 81       	ld	r24, Z
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 1cc:	e8 9a       	sbi	0x1d, 0	; 29
	//EIMSK |= (1<<PCINT1);
	PCICR = setBit(1, PCIE1, PCICR);
 1ce:	e8 e6       	ldi	r30, 0x68	; 104
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 1d4:	82 60       	ori	r24, 0x02	; 2
	// activate Interrupt
	EICRA &= ~((1<<ISC00)|(1<<ISC01));
	EICRA |= (1<<ISC01);
	EIMSK |= (1<<INT0);
	//EIMSK |= (1<<PCINT1);
	PCICR = setBit(1, PCIE1, PCICR);
 1d6:	80 83       	st	Z, r24
	PCMSK1 = setBit(1,PCINT11,PCMSK1);
 1d8:	ec e6       	ldi	r30, 0x6C	; 108
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 1de:	88 60       	ori	r24, 0x08	; 8
	EICRA &= ~((1<<ISC00)|(1<<ISC01));
	EICRA |= (1<<ISC01);
	EIMSK |= (1<<INT0);
	//EIMSK |= (1<<PCINT1);
	PCICR = setBit(1, PCIE1, PCICR);
	PCMSK1 = setBit(1,PCINT11,PCMSK1);
 1e0:	80 83       	st	Z, r24
	sei();
 1e2:	78 94       	sei
	
	uint8_t startValue = setStartValue();
 1e4:	0e 94 6c 00 	call	0xd8	; 0xd8 <setStartValue>
 1e8:	18 2f       	mov	r17, r24
	uint8_t delayCounter, a3Val = 0, prevA3Val, a5Val, a6Val, a7Val;
	counter = startValue;
 1ea:	80 93 00 01 	sts	0x0100, r24
					counter = startValue;
				}
				else{
					counter --;
				}
				delayCounter = 0;
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
		}
		prevA3Val = a3Val;
		*/
		
		
		if(running){
 1f0:	90 91 01 01 	lds	r25, 0x0101
 1f4:	99 23       	and	r25, r25
 1f6:	a1 f0       	breq	.+40     	; 0x220 <main+0x86>
			if(delayCounter == 9){
 1f8:	c9 30       	cpi	r28, 0x09	; 9
 1fa:	89 f4       	brne	.+34     	; 0x21e <main+0x84>
				setLEDs(counter);
 1fc:	80 91 00 01 	lds	r24, 0x0100
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <setLEDs>
				if(counter == 0){
 204:	90 91 00 01 	lds	r25, 0x0100
 208:	91 11       	cpse	r25, r1
 20a:	04 c0       	rjmp	.+8      	; 0x214 <main+0x7a>
					counter = startValue;
 20c:	10 93 00 01 	sts	0x0100, r17
				}
				else{
					counter --;
				}
				delayCounter = 0;
 210:	cd 2f       	mov	r28, r29
 212:	06 c0       	rjmp	.+12     	; 0x220 <main+0x86>
				setLEDs(counter);
				if(counter == 0){
					counter = startValue;
				}
				else{
					counter --;
 214:	91 50       	subi	r25, 0x01	; 1
 216:	90 93 00 01 	sts	0x0100, r25
				}
				delayCounter = 0;
 21a:	cd 2f       	mov	r28, r29
 21c:	01 c0       	rjmp	.+2      	; 0x220 <main+0x86>
			}
			else{
				delayCounter++;
 21e:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	81 ee       	ldi	r24, 0xE1	; 225
 224:	94 e0       	ldi	r25, 0x04	; 4
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x8c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x96>
 230:	00 00       	nop
 232:	de cf       	rjmp	.-68     	; 0x1f0 <main+0x56>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
