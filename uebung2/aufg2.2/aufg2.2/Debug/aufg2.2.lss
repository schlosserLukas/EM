
aufg2.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000480  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fd  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020e  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d1  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b7  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_3>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  9e:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setLEDs>:
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	a9 01       	movw	r20, r18
  ac:	55 95       	asr	r21
  ae:	47 95       	ror	r20
  b0:	55 95       	asr	r21
  b2:	47 95       	ror	r20
}

void setLEDs(uint8_t counter){
	if(getBit(counter, 2)){
  b4:	40 ff       	sbrs	r20, 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <setLEDs+0x16>
		PORTD = setBit(0,PORTD0,PORTD);
  b8:	58 98       	cbi	0x0b, 0	; 11
  ba:	01 c0       	rjmp	.+2      	; 0xbe <setLEDs+0x18>
	}
	else{
		PORTD|=(1<<PORTD0);
  bc:	58 9a       	sbi	0x0b, 0	; 11
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
		PORTD = setBit(0,PORTD0,PORTD);
	}
	else{
		PORTD|=(1<<PORTD0);
	}
	if(getBit(counter,1)){
  c2:	20 ff       	sbrs	r18, 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <setLEDs+0x24>
		PORTD = setBit(0, PORTD1, PORTD);
  c6:	59 98       	cbi	0x0b, 1	; 11
  c8:	01 c0       	rjmp	.+2      	; 0xcc <setLEDs+0x26>
	}
	else{
		PORTD|=(1<<PORTD1);
  ca:	59 9a       	sbi	0x0b, 1	; 11
	}
	if(getBit(counter,0)){
  cc:	80 ff       	sbrs	r24, 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <setLEDs+0x2e>
		PORTD = setBit(0, PORTD6, PORTD);
  d0:	5e 98       	cbi	0x0b, 6	; 11
  d2:	08 95       	ret
	}
	else{
		PORTD|=(1<<PORTD6);
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	08 95       	ret

000000d8 <setStartValue>:
	
}

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
  d8:	69 b1       	in	r22, 0x09	; 9
	uint8_t a6Val = !getBit(PIND, PIND3);
  da:	79 b1       	in	r23, 0x09	; 9
	uint8_t a7Val = !getBit(PIND, PIND4);
  dc:	59 b1       	in	r21, 0x09	; 9
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  de:	76 95       	lsr	r23
  e0:	76 95       	lsr	r23
  e2:	76 95       	lsr	r23
}

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	74 27       	eor	r23, r20
  e8:	87 2f       	mov	r24, r23
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
	
}

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
  f2:	65 fb       	bst	r22, 5
  f4:	99 27       	eor	r25, r25
  f6:	90 f9       	bld	r25, 0
  f8:	94 27       	eor	r25, r20


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
  fa:	89 2b       	or	r24, r25
  fc:	8b 7f       	andi	r24, 0xFB	; 251
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  fe:	95 2f       	mov	r25, r21
 100:	92 95       	swap	r25
 102:	9f 70       	andi	r25, 0x0F	; 15

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
	uint8_t a7Val = !getBit(PIND, PIND4);
 104:	49 27       	eor	r20, r25
 106:	24 2f       	mov	r18, r20
 108:	21 70       	andi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
	uint8_t a7Val = !getBit(PIND, PIND4);
	startValue=setBit(a5Val,0,startValue);
	startValue=setBit(a6Val,1,startValue);
	startValue=setBit(a7Val,2,startValue);
	return startValue;
}
 114:	82 2b       	or	r24, r18
 116:	08 95       	ret

00000118 <__vector_1>:




ISR(INT0_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
	running = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 01 01 	sts	0x0101, r24
	counter = startValue;
 12a:	80 91 02 01 	lds	r24, 0x0102
 12e:	80 93 00 01 	sts	0x0100, r24
	
}
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_4>:

ISR(PCINT1_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	running = 0;
 160:	10 92 01 01 	sts	0x0101, r1
	counter = startValue;
 164:	80 91 02 01 	lds	r24, 0x0102
 168:	80 93 00 01 	sts	0x0100, r24
	setLEDs(counter);
 16c:	80 91 00 01 	lds	r24, 0x0100
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <setLEDs>
	//PORTD ^= (1<<PORTD7);
	
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_3>:

ISR(PCINT0_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
	counter = startValue;
 1a2:	80 91 02 01 	lds	r24, 0x0102
 1a6:	80 93 00 01 	sts	0x0100, r24
	PORTD ^= (1<<PORTD7);
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	80 58       	subi	r24, 0x80	; 128
 1ae:	8b b9       	out	0x0b, r24	; 11
	
}
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <main>:


int main(void)
{

	DDRD|=(1<<DDD0);//LED A1
 1bc:	50 9a       	sbi	0x0a, 0	; 10
	DDRD|=(1<<DDD1);//LED A4
 1be:	51 9a       	sbi	0x0a, 1	; 10
	DDRD|=(1<<DDD6);//LED A7
 1c0:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<DDD7); //LED A3
 1c2:	57 9a       	sbi	0x0a, 7	; 10
	DDRB = setBit(1, PORTB0, DDRB); // output for sw interupt
 1c4:	20 9a       	sbi	0x04, 0	; 4
	
	PORTD|=(1<<DDD5);//pullup widerstand 0
 1c6:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD|=(1<<DDD3);//pullup widerstand 1
 1c8:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD|=(1<<DDD4);//pullup widerstand 2
 1ca:	5c 9a       	sbi	0x0b, 4	; 11
	PORTC|=(1<<DDC3);//pullup widerstand 3 fuer Taster a3
 1cc:	43 9a       	sbi	0x08, 3	; 8
	PORTD|=(1<<DDD2);//pullup widerstand 4 fuer Taster a4
 1ce:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PORTD0);
 1d0:	58 9a       	sbi	0x0b, 0	; 11
	PORTD|=(1<<PORTD1),
 1d2:	59 9a       	sbi	0x0b, 1	; 11
	PORTD|=(1<<PORTD6);
 1d4:	5e 9a       	sbi	0x0b, 6	; 11
	
	// activate Interrupt
	EICRA &= ~((1<<ISC00)|(1<<ISC01));
 1d6:	e9 e6       	ldi	r30, 0x69	; 105
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	8c 7f       	andi	r24, 0xFC	; 252
 1de:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 1e6:	e8 9a       	sbi	0x1d, 0	; 29
	PCICR = setBit(1, PCIE1, PCICR);
 1e8:	e8 e6       	ldi	r30, 0x68	; 104
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 1ee:	82 60       	ori	r24, 0x02	; 2
	
	// activate Interrupt
	EICRA &= ~((1<<ISC00)|(1<<ISC01));
	EICRA |= (1<<ISC01);
	EIMSK |= (1<<INT0);
	PCICR = setBit(1, PCIE1, PCICR);
 1f0:	80 83       	st	Z, r24
	PCICR = setBit(1, PCIE0, PCICR);
 1f2:	80 81       	ld	r24, Z


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 1f4:	81 60       	ori	r24, 0x01	; 1
	// activate Interrupt
	EICRA &= ~((1<<ISC00)|(1<<ISC01));
	EICRA |= (1<<ISC01);
	EIMSK |= (1<<INT0);
	PCICR = setBit(1, PCIE1, PCICR);
	PCICR = setBit(1, PCIE0, PCICR);
 1f6:	80 83       	st	Z, r24
	PCMSK1 = setBit(1,PCINT11,PCMSK1);
 1f8:	ec e6       	ldi	r30, 0x6C	; 108
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 1fe:	88 60       	ori	r24, 0x08	; 8
	EICRA &= ~((1<<ISC00)|(1<<ISC01));
	EICRA |= (1<<ISC01);
	EIMSK |= (1<<INT0);
	PCICR = setBit(1, PCIE1, PCICR);
	PCICR = setBit(1, PCIE0, PCICR);
	PCMSK1 = setBit(1,PCINT11,PCMSK1);
 200:	80 83       	st	Z, r24
	
	PCMSK0 = setBit(1,PCINT0, PCMSK0);
 202:	eb e6       	ldi	r30, 0x6B	; 107
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 208:	81 60       	ori	r24, 0x01	; 1
	EIMSK |= (1<<INT0);
	PCICR = setBit(1, PCIE1, PCICR);
	PCICR = setBit(1, PCIE0, PCICR);
	PCMSK1 = setBit(1,PCINT11,PCMSK1);
	
	PCMSK0 = setBit(1,PCINT0, PCMSK0);
 20a:	80 83       	st	Z, r24
	
	sei();
 20c:	78 94       	sei
	
	startValue = setStartValue();
 20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <setStartValue>
 212:	80 93 02 01 	sts	0x0102, r24
	counter = startValue;
 216:	80 91 02 01 	lds	r24, 0x0102
 21a:	80 93 00 01 	sts	0x0100, r24
		if(running){
			setLEDs(counter);
			if(counter == 0){
				//counter = startValue
				//sw interrupt
				PORTB^= 1<<PORTB0;
 21e:	c1 e0       	ldi	r28, 0x01	; 1
	counter = startValue;
	
	
	while(1)
	{
		startValue = setStartValue();
 220:	0e 94 6c 00 	call	0xd8	; 0xd8 <setStartValue>
 224:	80 93 02 01 	sts	0x0102, r24
		if(running){
 228:	80 91 01 01 	lds	r24, 0x0101
 22c:	88 23       	and	r24, r24
 22e:	89 f0       	breq	.+34     	; 0x252 <main+0x96>
			setLEDs(counter);
 230:	80 91 00 01 	lds	r24, 0x0100
 234:	0e 94 53 00 	call	0xa6	; 0xa6 <setLEDs>
			if(counter == 0){
 238:	80 91 00 01 	lds	r24, 0x0100
 23c:	81 11       	cpse	r24, r1
 23e:	04 c0       	rjmp	.+8      	; 0x248 <main+0x8c>
				//counter = startValue
				//sw interrupt
				PORTB^= 1<<PORTB0;
 240:	85 b1       	in	r24, 0x05	; 5
 242:	8c 27       	eor	r24, r28
 244:	85 b9       	out	0x05, r24	; 5
 246:	05 c0       	rjmp	.+10     	; 0x252 <main+0x96>
			}
			else{
				counter--;
 248:	80 91 00 01 	lds	r24, 0x0100
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	80 93 00 01 	sts	0x0100, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	83 ed       	ldi	r24, 0xD3	; 211
 256:	90 e3       	ldi	r25, 0x30	; 48
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x9c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0xa6>
 262:	00 00       	nop
 264:	dd cf       	rjmp	.-70     	; 0x220 <main+0x64>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
