
aufg1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000032a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000589  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000218  00000000  00000000  000009d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000262  00000000  00000000  00000bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000219  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f6  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setEvent>:
typedef uint16_t event_type;

volatile event_type events=0;

void setEvent(event_type ev) {
	unsigned char sreg_old = SREG;
  a6:	4f b7       	in	r20, 0x3f	; 63
	cli();
  a8:	f8 94       	cli
	events |= ev;
  aa:	20 91 05 01 	lds	r18, 0x0105
  ae:	30 91 06 01 	lds	r19, 0x0106
  b2:	82 2b       	or	r24, r18
  b4:	93 2b       	or	r25, r19
  b6:	90 93 06 01 	sts	0x0106, r25
  ba:	80 93 05 01 	sts	0x0105, r24
	SREG = sreg_old;
  be:	4f bf       	out	0x3f, r20	; 63
  c0:	08 95       	ret

000000c2 <clearEvent>:
}

void clearEvent(event_type ev) {
	unsigned char sreg_old = SREG;
  c2:	4f b7       	in	r20, 0x3f	; 63
	cli();
  c4:	f8 94       	cli
	events &= ~ev;
  c6:	20 91 05 01 	lds	r18, 0x0105
  ca:	30 91 06 01 	lds	r19, 0x0106
  ce:	80 95       	com	r24
  d0:	90 95       	com	r25
  d2:	82 23       	and	r24, r18
  d4:	93 23       	and	r25, r19
  d6:	90 93 06 01 	sts	0x0106, r25
  da:	80 93 05 01 	sts	0x0105, r24
	SREG = sreg_old;
  de:	4f bf       	out	0x3f, r20	; 63
  e0:	08 95       	ret

000000e2 <setLEDs>:
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	a9 01       	movw	r20, r18
  e8:	55 95       	asr	r21
  ea:	47 95       	ror	r20
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
}

void setLEDs(uint8_t counter){
	if(getBit(counter, 2)){
  f0:	40 ff       	sbrs	r20, 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <setLEDs+0x16>
		PORTD = setBit(0,PORTD0,PORTD);
  f4:	58 98       	cbi	0x0b, 0	; 11
  f6:	01 c0       	rjmp	.+2      	; 0xfa <setLEDs+0x18>
	}
	else{
		PORTD|=(1<<PORTD0);
  f8:	58 9a       	sbi	0x0b, 0	; 11
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  fa:	35 95       	asr	r19
  fc:	27 95       	ror	r18
		PORTD = setBit(0,PORTD0,PORTD);
	}
	else{
		PORTD|=(1<<PORTD0);
	}
	if(getBit(counter,1)){
  fe:	20 ff       	sbrs	r18, 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <setLEDs+0x24>
		PORTD = setBit(0, PORTD1, PORTD);
 102:	59 98       	cbi	0x0b, 1	; 11
 104:	01 c0       	rjmp	.+2      	; 0x108 <setLEDs+0x26>
	}
	else{
		PORTD|=(1<<PORTD1);
 106:	59 9a       	sbi	0x0b, 1	; 11
	}
	if(getBit(counter,0)){
 108:	80 ff       	sbrs	r24, 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <setLEDs+0x2e>
		PORTD = setBit(0, PORTD6, PORTD);
 10c:	5e 98       	cbi	0x0b, 6	; 11
 10e:	08 95       	ret
	}
	else{
		PORTD|=(1<<PORTD6);
 110:	5e 9a       	sbi	0x0b, 6	; 11
 112:	08 95       	ret

00000114 <setStartValue>:
	
}

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
 114:	69 b1       	in	r22, 0x09	; 9
	uint8_t a6Val = !getBit(PIND, PIND3);
 116:	79 b1       	in	r23, 0x09	; 9
	uint8_t a7Val = !getBit(PIND, PIND4);
 118:	59 b1       	in	r21, 0x09	; 9
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
 11a:	76 95       	lsr	r23
 11c:	76 95       	lsr	r23
 11e:	76 95       	lsr	r23
}

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	74 27       	eor	r23, r20
 124:	87 2f       	mov	r24, r23
 126:	81 70       	andi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
	
}

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
 12e:	65 fb       	bst	r22, 5
 130:	99 27       	eor	r25, r25
 132:	90 f9       	bld	r25, 0
 134:	94 27       	eor	r25, r20


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 136:	89 2b       	or	r24, r25
 138:	8b 7f       	andi	r24, 0xFB	; 251
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
 13a:	95 2f       	mov	r25, r21
 13c:	92 95       	swap	r25
 13e:	9f 70       	andi	r25, 0x0F	; 15

uint8_t setStartValue(){
	uint8_t startValue=0;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
	uint8_t a7Val = !getBit(PIND, PIND4);
 140:	49 27       	eor	r20, r25
 142:	24 2f       	mov	r18, r20
 144:	21 70       	andi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0


uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
	uint8_t a7Val = !getBit(PIND, PIND4);
	startValue=setBit(a5Val,0,startValue);
	startValue=setBit(a6Val,1,startValue);
	startValue=setBit(a7Val,2,startValue);
	return startValue;
}
 150:	82 2b       	or	r24, r18
 152:	08 95       	ret

00000154 <__vector_16>:




ISR(TIMER0_OVF_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	static uint16_t counter = 0;
	TCNT0 = 6;
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	86 bd       	out	0x26, r24	; 38
	counter++;
 17e:	c0 91 02 01 	lds	r28, 0x0102
 182:	d0 91 03 01 	lds	r29, 0x0103
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	d0 93 03 01 	sts	0x0103, r29
 18c:	c0 93 02 01 	sts	0x0102, r28
	if (counter%50==0){
 190:	9e 01       	movw	r18, r28
 192:	36 95       	lsr	r19
 194:	27 95       	ror	r18
 196:	ab e7       	ldi	r26, 0x7B	; 123
 198:	b4 e1       	ldi	r27, 0x14	; 20
 19a:	0e 94 84 01 	call	0x308	; 0x308 <__umulhisi3>
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	42 e3       	ldi	r20, 0x32	; 50
 1a4:	48 9f       	mul	r20, r24
 1a6:	90 01       	movw	r18, r0
 1a8:	49 9f       	mul	r20, r25
 1aa:	30 0d       	add	r19, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	c2 17       	cp	r28, r18
 1b0:	d3 07       	cpc	r29, r19
 1b2:	21 f4       	brne	.+8      	; 0x1bc <__vector_16+0x68>
		setEvent(EVENT_0);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
	}
	if(counter==1000){
 1bc:	c8 3e       	cpi	r28, 0xE8	; 232
 1be:	d3 40       	sbci	r29, 0x03	; 3
 1c0:	41 f4       	brne	.+16     	; 0x1d2 <__vector_16+0x7e>
		setEvent(EVENT_1);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
		counter = 0;
 1ca:	10 92 03 01 	sts	0x0103, r1
 1ce:	10 92 02 01 	sts	0x0102, r1
	}
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <main>:


int main(void)
{

	DDRD|=(1<<DDD0);//LED A1
 1f8:	50 9a       	sbi	0x0a, 0	; 10
	DDRD|=(1<<DDD1);//LED A4
 1fa:	51 9a       	sbi	0x0a, 1	; 10
	DDRD|=(1<<DDD6);//LED A7
 1fc:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<DDD7); //LED A3
 1fe:	57 9a       	sbi	0x0a, 7	; 10
	DDRB = setBit(1, PORTB0, DDRB); // output for sw interupt
 200:	20 9a       	sbi	0x04, 0	; 4
	
	PORTD|=(1<<DDD5);//pullup widerstand 0
 202:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD|=(1<<DDD3);//pullup widerstand 1
 204:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD|=(1<<DDD4);//pullup widerstand 2
 206:	5c 9a       	sbi	0x0b, 4	; 11
	PORTB|=(1<<DDB0);//pullup widerstand 3 fuer Taster a3
 208:	28 9a       	sbi	0x05, 0	; 5
	PORTD|=(1<<DDD2);//pullup widerstand 4 fuer Taster a4
 20a:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PORTD0);
 20c:	58 9a       	sbi	0x0b, 0	; 11
	PORTD|=(1<<PORTD1),
 20e:	59 9a       	sbi	0x0b, 1	; 11
	PORTD|=(1<<PORTD6);
 210:	5e 9a       	sbi	0x0b, 6	; 11
	
	// activate Interrupt
	
	DDRB |= (1<<PORTB1)|(1<<PORTB0);
 212:	84 b1       	in	r24, 0x04	; 4
 214:	83 60       	ori	r24, 0x03	; 3
 216:	84 b9       	out	0x04, r24	; 4
	TCNT0 = 6;
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	86 bd       	out	0x26, r24	; 38
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 21c:	85 b5       	in	r24, 0x25	; 37
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01)|(1<<CS00);
 222:	85 b5       	in	r24, 0x25	; 37
 224:	83 60       	ori	r24, 0x03	; 3
 226:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
 228:	ee e6       	ldi	r30, 0x6E	; 110
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
	sei();
 232:	78 94       	sei
	
	startValue = setStartValue();
 234:	0e 94 8a 00 	call	0x114	; 0x114 <setStartValue>
 238:	80 93 04 01 	sts	0x0104, r24
	counter = startValue;
 23c:	80 91 04 01 	lds	r24, 0x0104
 240:	80 93 00 01 	sts	0x0100, r24
			}
		}
		
		if(eventIsSet(EVENT_0)){
			clearEvent(EVENT_0);
			PORTB ^= (1<<PORTB1);
 244:	02 e0       	ldi	r16, 0x02	; 2
			}
			prevA3Val = a3Val;
			
			a4Val = getBit(PIND, PIND2);
			if(a4Val && !prevA4Val){
				running = 1;
 246:	ff 24       	eor	r15, r15
 248:	f3 94       	inc	r15
	counter = startValue;
	uint8_t a3Val = 0, prevA3Val, a4Val = 0, prevA4Val;
	
	while(1)
	{
		startValue = setStartValue();
 24a:	0e 94 8a 00 	call	0x114	; 0x114 <setStartValue>
 24e:	80 93 04 01 	sts	0x0104, r24
}

int eventIsSet(event_type ev){
	return (events&ev);
 252:	80 91 05 01 	lds	r24, 0x0105
 256:	90 91 06 01 	lds	r25, 0x0106
		
		if(eventIsSet(EVENT_1)){
 25a:	81 ff       	sbrs	r24, 1
 25c:	1a c0       	rjmp	.+52     	; 0x292 <main+0x9a>
			clearEvent(EVENT_1);
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 61 00 	call	0xc2	; 0xc2 <clearEvent>
			if(running){
 266:	80 91 01 01 	lds	r24, 0x0101
 26a:	88 23       	and	r24, r24
 26c:	91 f0       	breq	.+36     	; 0x292 <main+0x9a>
				setLEDs(counter);
 26e:	80 91 00 01 	lds	r24, 0x0100
 272:	0e 94 71 00 	call	0xe2	; 0xe2 <setLEDs>
				if(counter==0){
 276:	80 91 00 01 	lds	r24, 0x0100
 27a:	81 11       	cpse	r24, r1
 27c:	05 c0       	rjmp	.+10     	; 0x288 <main+0x90>
					counter = startValue;
 27e:	80 91 04 01 	lds	r24, 0x0104
 282:	80 93 00 01 	sts	0x0100, r24
 286:	05 c0       	rjmp	.+10     	; 0x292 <main+0x9a>
				}else{
					counter--;
 288:	80 91 00 01 	lds	r24, 0x0100
 28c:	81 50       	subi	r24, 0x01	; 1
 28e:	80 93 00 01 	sts	0x0100, r24
 292:	80 91 05 01 	lds	r24, 0x0105
 296:	90 91 06 01 	lds	r25, 0x0106
				}
			}
		}
		
		if(eventIsSet(EVENT_0)){
 29a:	80 ff       	sbrs	r24, 0
 29c:	2e c0       	rjmp	.+92     	; 0x2fa <main+0x102>
			clearEvent(EVENT_0);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 61 00 	call	0xc2	; 0xc2 <clearEvent>
			PORTB ^= (1<<PORTB1);
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	80 27       	eor	r24, r16
 2aa:	85 b9       	out	0x05, r24	; 5
			a3Val = getBit(PINB, PINB0);
 2ac:	83 b1       	in	r24, 0x03	; 3
			if(a3Val && !prevA3Val){
 2ae:	c8 2f       	mov	r28, r24
 2b0:	c1 70       	andi	r28, 0x01	; 1
 2b2:	80 ff       	sbrs	r24, 0
 2b4:	0c c0       	rjmp	.+24     	; 0x2ce <main+0xd6>
 2b6:	d1 11       	cpse	r29, r1
 2b8:	0a c0       	rjmp	.+20     	; 0x2ce <main+0xd6>
				running = 0;
 2ba:	10 92 01 01 	sts	0x0101, r1
				counter = startValue;
 2be:	80 91 04 01 	lds	r24, 0x0104
 2c2:	80 93 00 01 	sts	0x0100, r24
				setLEDs(counter);
 2c6:	80 91 00 01 	lds	r24, 0x0100
 2ca:	0e 94 71 00 	call	0xe2	; 0xe2 <setLEDs>
			}
			prevA3Val = a3Val;
			
			a4Val = getBit(PIND, PIND2);
 2ce:	89 b1       	in	r24, 0x09	; 9
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
 2d0:	82 fb       	bst	r24, 2
 2d2:	88 27       	eor	r24, r24
 2d4:	80 f9       	bld	r24, 0
				setLEDs(counter);
			}
			prevA3Val = a3Val;
			
			a4Val = getBit(PIND, PIND2);
			if(a4Val && !prevA4Val){
 2d6:	88 23       	and	r24, r24
 2d8:	59 f0       	breq	.+22     	; 0x2f0 <main+0xf8>
 2da:	11 11       	cpse	r17, r1
 2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <main+0xfe>
				running = 1;
 2de:	f0 92 01 01 	sts	0x0101, r15
				counter = startValue;
 2e2:	90 91 04 01 	lds	r25, 0x0104
 2e6:	90 93 00 01 	sts	0x0100, r25
				
			}
			prevA4Val = a4Val;
 2ea:	18 2f       	mov	r17, r24
			if(a3Val && !prevA3Val){
				running = 0;
				counter = startValue;
				setLEDs(counter);
			}
			prevA3Val = a3Val;
 2ec:	dc 2f       	mov	r29, r28
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <main+0x102>
			if(a4Val && !prevA4Val){
				running = 1;
				counter = startValue;
				
			}
			prevA4Val = a4Val;
 2f0:	18 2f       	mov	r17, r24
			if(a3Val && !prevA3Val){
				running = 0;
				counter = startValue;
				setLEDs(counter);
			}
			prevA3Val = a3Val;
 2f2:	dc 2f       	mov	r29, r28
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <main+0x102>
			if(a4Val && !prevA4Val){
				running = 1;
				counter = startValue;
				
			}
			prevA4Val = a4Val;
 2f6:	18 2f       	mov	r17, r24
			if(a3Val && !prevA3Val){
				running = 0;
				counter = startValue;
				setLEDs(counter);
			}
			prevA3Val = a3Val;
 2f8:	dc 2f       	mov	r29, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	9c e9       	ldi	r25, 0x9C	; 156
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x106>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x10c>
 304:	00 00       	nop
 306:	a1 cf       	rjmp	.-190    	; 0x24a <main+0x52>

00000308 <__umulhisi3>:
 308:	a2 9f       	mul	r26, r18
 30a:	b0 01       	movw	r22, r0
 30c:	b3 9f       	mul	r27, r19
 30e:	c0 01       	movw	r24, r0
 310:	a3 9f       	mul	r26, r19
 312:	70 0d       	add	r23, r0
 314:	81 1d       	adc	r24, r1
 316:	11 24       	eor	r1, r1
 318:	91 1d       	adc	r25, r1
 31a:	b2 9f       	mul	r27, r18
 31c:	70 0d       	add	r23, r0
 31e:	81 1d       	adc	r24, r1
 320:	11 24       	eor	r1, r1
 322:	91 1d       	adc	r25, r1
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
