
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b8  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ee  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000219  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fc  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d5  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_4>
  14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  9e:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setLEDs>:
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	a9 01       	movw	r20, r18
  ac:	55 95       	asr	r21
  ae:	47 95       	ror	r20
  b0:	55 95       	asr	r21
  b2:	47 95       	ror	r20
}
void setLEDs(uint8_t counter){
	if(getBit(counter,2)){
  b4:	40 ff       	sbrs	r20, 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <setLEDs+0x16>
		PORTB=setBit(0,PORTB0,PORTB);
  b8:	28 98       	cbi	0x05, 0	; 5
  ba:	01 c0       	rjmp	.+2      	; 0xbe <setLEDs+0x18>
	}
	else{
		PORTB|=(1<<PORTB0);
  bc:	28 9a       	sbi	0x05, 0	; 5
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
		PORTB=setBit(0,PORTB0,PORTB);
	}
	else{
		PORTB|=(1<<PORTB0);
	}
	if(getBit(counter,1)){
  c2:	20 ff       	sbrs	r18, 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <setLEDs+0x24>
		PORTB=setBit(0,PORTB1,PORTB);
  c6:	29 98       	cbi	0x05, 1	; 5
  c8:	01 c0       	rjmp	.+2      	; 0xcc <setLEDs+0x26>
	}
	else{
		PORTB|=(1<<PORTB1);
  ca:	29 9a       	sbi	0x05, 1	; 5
	}
	if(getBit(counter,0)){
  cc:	80 ff       	sbrs	r24, 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <setLEDs+0x2e>
		PORTB=setBit(0,PORTB2,PORTB);
  d0:	2a 98       	cbi	0x05, 2	; 5
  d2:	08 95       	ret
	}
	else{
		PORTB|=(1<<PORTB2);
  d4:	2a 9a       	sbi	0x05, 2	; 5
  d6:	08 95       	ret

000000d8 <setStartValue>:
	}
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
  d8:	49 b1       	in	r20, 0x09	; 9
	uint8_t a6Val = !getBit(PIND, PIND6);
  da:	59 b1       	in	r21, 0x09	; 9
	uint8_t a7Val = !getBit(PIND, PIND7);
  dc:	89 b1       	in	r24, 0x09	; 9
	}
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	45 fb       	bst	r20, 5
  e2:	44 27       	eor	r20, r20
  e4:	40 f9       	bld	r20, 0
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
  e6:	49 27       	eor	r20, r25
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  e8:	52 95       	swap	r21
  ea:	56 95       	lsr	r21
  ec:	56 95       	lsr	r21
  ee:	53 70       	andi	r21, 0x03	; 3
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND6);
  f0:	59 27       	eor	r21, r25
  f2:	25 2f       	mov	r18, r21
  f4:	21 70       	andi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	24 2b       	or	r18, r20
  fe:	2b 7f       	andi	r18, 0xFB	; 251
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
 100:	88 1f       	adc	r24, r24
 102:	88 27       	eor	r24, r24
 104:	88 1f       	adc	r24, r24

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND6);
	uint8_t a7Val = !getBit(PIND, PIND7);
 106:	98 27       	eor	r25, r24
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 108:	89 2f       	mov	r24, r25
 10a:	88 0f       	add	r24, r24
 10c:	88 0f       	add	r24, r24
	uint8_t a7Val = !getBit(PIND, PIND7);
	startValue=setBit(a5Val,0,startValue);
	startValue=setBit(a6Val,1,startValue);
	startValue=setBit(a7Val,2,startValue);
	return startValue;
}
 10e:	82 2b       	or	r24, r18
 110:	08 95       	ret

00000112 <__vector_1>:

ISR(INT0_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	running=1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 01 01 	sts	0x0101, r24
	counter = startValue;
 124:	80 91 02 01 	lds	r24, 0x0102
 128:	80 93 00 01 	sts	0x0100, r24
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_4>:

ISR(PCINT1_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	running=0;
 15a:	10 92 01 01 	sts	0x0101, r1
	counter = startValue;
 15e:	80 91 02 01 	lds	r24, 0x0102
 162:	80 93 00 01 	sts	0x0100, r24
	setLEDs(counter);
 166:	80 91 00 01 	lds	r24, 0x0100
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <setLEDs>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <__vector_5>:

ISR(PCINT2_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
	PORTB^=(1<<PORTB3);
 19e:	95 b1       	in	r25, 0x05	; 5
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	89 27       	eor	r24, r25
 1a4:	85 b9       	out	0x05, r24	; 5
	counter = startValue;
 1a6:	80 91 02 01 	lds	r24, 0x0102
 1aa:	80 93 00 01 	sts	0x0100, r24
}
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <main>:
int main(void)
{
	DDRB|=(1<<DDB0);
 1bc:	20 9a       	sbi	0x04, 0	; 4
	DDRB|=(1<<DDB1);
 1be:	21 9a       	sbi	0x04, 1	; 4
	DDRB|=(1<<DDB2);
 1c0:	22 9a       	sbi	0x04, 2	; 4
	DDRB|=(1<<DDB3); //LED for debugging
 1c2:	23 9a       	sbi	0x04, 3	; 4
	PORTD|=(1<<DDD2); //pullup widerstand 0
 1c4:	5a 9a       	sbi	0x0b, 2	; 11
	PORTC|=(1<<DDC3); //pullup widerstand 1
 1c6:	43 9a       	sbi	0x08, 3	; 8
	PORTD|=(1<<DDD5); //pullup widerstand 2
 1c8:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD|=(1<<DDD6); //pullup widerstand 3
 1ca:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD|=(1<<DDD7); //pullup widerstand 4
 1cc:	5f 9a       	sbi	0x0b, 7	; 11
	
	PORTB|=(1<<PORTB0); //led default off
 1ce:	28 9a       	sbi	0x05, 0	; 5
	PORTB|=(1<<PORTB1);	//led default off
 1d0:	29 9a       	sbi	0x05, 1	; 5
	PORTB|=(1<<PORTB2);	//led default off
 1d2:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=(0<<PORTB3);
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	85 b9       	out	0x05, r24	; 5
	EICRA = setBit(0, ISC00, EICRA);
 1d8:	e9 e6       	ldi	r30, 0x69	; 105
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 1de:	8e 7f       	andi	r24, 0xFE	; 254
	
	PORTB|=(1<<PORTB0); //led default off
	PORTB|=(1<<PORTB1);	//led default off
	PORTB|=(1<<PORTB2);	//led default off
	PORTB|=(0<<PORTB3);
	EICRA = setBit(0, ISC00, EICRA);
 1e0:	80 83       	st	Z, r24
	EICRA = setBit(1, ISC01, EICRA);
 1e2:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 1e4:	82 60       	ori	r24, 0x02	; 2
	PORTB|=(1<<PORTB0); //led default off
	PORTB|=(1<<PORTB1);	//led default off
	PORTB|=(1<<PORTB2);	//led default off
	PORTB|=(0<<PORTB3);
	EICRA = setBit(0, ISC00, EICRA);
	EICRA = setBit(1, ISC01, EICRA);
 1e6:	80 83       	st	Z, r24
	EIMSK = setBit(1, INT0, EIMSK);
 1e8:	e8 9a       	sbi	0x1d, 0	; 29
	PCICR = setBit(1, PCIE1, PCICR);
 1ea:	e8 e6       	ldi	r30, 0x68	; 104
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 1f0:	82 60       	ori	r24, 0x02	; 2
	PORTB|=(1<<PORTB2);	//led default off
	PORTB|=(0<<PORTB3);
	EICRA = setBit(0, ISC00, EICRA);
	EICRA = setBit(1, ISC01, EICRA);
	EIMSK = setBit(1, INT0, EIMSK);
	PCICR = setBit(1, PCIE1, PCICR);
 1f2:	80 83       	st	Z, r24
	PCICR = setBit(1, PCIE2, PCICR);
 1f4:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 1f6:	84 60       	ori	r24, 0x04	; 4
	PORTB|=(0<<PORTB3);
	EICRA = setBit(0, ISC00, EICRA);
	EICRA = setBit(1, ISC01, EICRA);
	EIMSK = setBit(1, INT0, EIMSK);
	PCICR = setBit(1, PCIE1, PCICR);
	PCICR = setBit(1, PCIE2, PCICR);
 1f8:	80 83       	st	Z, r24
	PCMSK1 = setBit(1, PCINT11, PCMSK1);
 1fa:	ec e6       	ldi	r30, 0x6C	; 108
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 200:	88 60       	ori	r24, 0x08	; 8
	EICRA = setBit(0, ISC00, EICRA);
	EICRA = setBit(1, ISC01, EICRA);
	EIMSK = setBit(1, INT0, EIMSK);
	PCICR = setBit(1, PCIE1, PCICR);
	PCICR = setBit(1, PCIE2, PCICR);
	PCMSK1 = setBit(1, PCINT11, PCMSK1);
 202:	80 83       	st	Z, r24
	DDRD = setBit(1, PORTD4, DDRD);
 204:	54 9a       	sbi	0x0a, 4	; 10
	PCMSK2 = setBit(1, PCINT20, PCMSK2); //sw interrupt
 206:	ed e6       	ldi	r30, 0x6D	; 109
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 20c:	80 61       	ori	r24, 0x10	; 16
	EIMSK = setBit(1, INT0, EIMSK);
	PCICR = setBit(1, PCIE1, PCICR);
	PCICR = setBit(1, PCIE2, PCICR);
	PCMSK1 = setBit(1, PCINT11, PCMSK1);
	DDRD = setBit(1, PORTD4, DDRD);
	PCMSK2 = setBit(1, PCINT20, PCMSK2); //sw interrupt
 20e:	80 83       	st	Z, r24
	sei();
 210:	78 94       	sei
	
	startValue = setStartValue();
 212:	0e 94 6c 00 	call	0xd8	; 0xd8 <setStartValue>
 216:	80 93 02 01 	sts	0x0102, r24
	counter = startValue;
 21a:	80 91 02 01 	lds	r24, 0x0102
 21e:	80 93 00 01 	sts	0x0100, r24
		if(running){
			setLEDs(counter);
			if(counter == 0){
				//counter = startValue;
				//trigger sw interrupt
				PORTD^=1<<PORTD4;
 222:	c0 e1       	ldi	r28, 0x10	; 16
	
	startValue = setStartValue();
	counter = startValue;
	while(1)
	{
		startValue = setStartValue();
 224:	0e 94 6c 00 	call	0xd8	; 0xd8 <setStartValue>
 228:	80 93 02 01 	sts	0x0102, r24
		if(running){
 22c:	80 91 01 01 	lds	r24, 0x0101
 230:	88 23       	and	r24, r24
 232:	89 f0       	breq	.+34     	; 0x256 <main+0x9a>
			setLEDs(counter);
 234:	80 91 00 01 	lds	r24, 0x0100
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <setLEDs>
			if(counter == 0){
 23c:	80 91 00 01 	lds	r24, 0x0100
 240:	81 11       	cpse	r24, r1
 242:	04 c0       	rjmp	.+8      	; 0x24c <main+0x90>
				//counter = startValue;
				//trigger sw interrupt
				PORTD^=1<<PORTD4;
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8c 27       	eor	r24, r28
 248:	8b b9       	out	0x0b, r24	; 11
 24a:	05 c0       	rjmp	.+10     	; 0x256 <main+0x9a>
				}else{
				counter--;
 24c:	80 91 00 01 	lds	r24, 0x0100
 250:	81 50       	subi	r24, 0x01	; 1
 252:	80 93 00 01 	sts	0x0100, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	83 ed       	ldi	r24, 0xD3	; 211
 25a:	90 e3       	ldi	r25, 0x30	; 48
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0xa0>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0xaa>
 266:	00 00       	nop
 268:	dd cf       	rjmp	.-70     	; 0x224 <main+0x68>

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
