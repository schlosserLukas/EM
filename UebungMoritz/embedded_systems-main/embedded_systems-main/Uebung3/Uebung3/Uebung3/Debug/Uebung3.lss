
Uebung3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000352  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000230  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000283  00000000  00000000  00000ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025a  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000440  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 09 01 	call	0x212	; 0x212 <main>
  9e:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setEvent>:
typedef uint16_t event_type;

volatile event_type events=0;

void setEvent(event_type ev) {
	unsigned char sreg_old = SREG;
  a6:	4f b7       	in	r20, 0x3f	; 63
	cli();
  a8:	f8 94       	cli
	events |= ev;
  aa:	20 91 05 01 	lds	r18, 0x0105
  ae:	30 91 06 01 	lds	r19, 0x0106
  b2:	82 2b       	or	r24, r18
  b4:	93 2b       	or	r25, r19
  b6:	90 93 06 01 	sts	0x0106, r25
  ba:	80 93 05 01 	sts	0x0105, r24
	SREG = sreg_old;
  be:	4f bf       	out	0x3f, r20	; 63
  c0:	08 95       	ret

000000c2 <clearEvent>:
}

void clearEvent(event_type ev) {
	unsigned char sreg_old = SREG;
  c2:	4f b7       	in	r20, 0x3f	; 63
	cli();
  c4:	f8 94       	cli
	events &= ~ev;
  c6:	20 91 05 01 	lds	r18, 0x0105
  ca:	30 91 06 01 	lds	r19, 0x0106
  ce:	80 95       	com	r24
  d0:	90 95       	com	r25
  d2:	82 23       	and	r24, r18
  d4:	93 23       	and	r25, r19
  d6:	90 93 06 01 	sts	0x0106, r25
  da:	80 93 05 01 	sts	0x0105, r24
	SREG = sreg_old;
  de:	4f bf       	out	0x3f, r20	; 63
  e0:	08 95       	ret

000000e2 <setLEDs>:
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	a9 01       	movw	r20, r18
  e8:	55 95       	asr	r21
  ea:	47 95       	ror	r20
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
}
void setLEDs(uint8_t counter){
	if(getBit(counter,2)){
  f0:	40 ff       	sbrs	r20, 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <setLEDs+0x16>
		PORTB=setBit(0,PORTB0,PORTB);
  f4:	28 98       	cbi	0x05, 0	; 5
  f6:	01 c0       	rjmp	.+2      	; 0xfa <setLEDs+0x18>
	}
	else{
		PORTB|=(1<<PORTB0);
  f8:	28 9a       	sbi	0x05, 0	; 5
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  fa:	35 95       	asr	r19
  fc:	27 95       	ror	r18
		PORTB=setBit(0,PORTB0,PORTB);
	}
	else{
		PORTB|=(1<<PORTB0);
	}
	if(getBit(counter,1)){
  fe:	20 ff       	sbrs	r18, 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <setLEDs+0x24>
		PORTB=setBit(0,PORTB1,PORTB);
 102:	29 98       	cbi	0x05, 1	; 5
 104:	01 c0       	rjmp	.+2      	; 0x108 <setLEDs+0x26>
	}
	else{
		PORTB|=(1<<PORTB1);
 106:	29 9a       	sbi	0x05, 1	; 5
	}
	if(getBit(counter,0)){
 108:	80 ff       	sbrs	r24, 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <setLEDs+0x2e>
		PORTB=setBit(0,PORTB2,PORTB);
 10c:	2a 98       	cbi	0x05, 2	; 5
 10e:	08 95       	ret
	}
	else{
		PORTB|=(1<<PORTB2);
 110:	2a 9a       	sbi	0x05, 2	; 5
 112:	08 95       	ret

00000114 <setStartValue>:
	}
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
 114:	49 b1       	in	r20, 0x09	; 9
	uint8_t a6Val = !getBit(PIND, PIND6);
 116:	59 b1       	in	r21, 0x09	; 9
	uint8_t a7Val = !getBit(PIND, PIND7);
 118:	89 b1       	in	r24, 0x09	; 9
	}
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	45 fb       	bst	r20, 5
 11e:	44 27       	eor	r20, r20
 120:	40 f9       	bld	r20, 0
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 122:	49 27       	eor	r20, r25
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
 124:	52 95       	swap	r21
 126:	56 95       	lsr	r21
 128:	56 95       	lsr	r21
 12a:	53 70       	andi	r21, 0x03	; 3
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND6);
 12c:	59 27       	eor	r21, r25
 12e:	25 2f       	mov	r18, r21
 130:	21 70       	andi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	24 2b       	or	r18, r20
 13a:	2b 7f       	andi	r18, 0xFB	; 251
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
 13c:	88 1f       	adc	r24, r24
 13e:	88 27       	eor	r24, r24
 140:	88 1f       	adc	r24, r24

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND6);
	uint8_t a7Val = !getBit(PIND, PIND7);
 142:	98 27       	eor	r25, r24
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 144:	89 2f       	mov	r24, r25
 146:	88 0f       	add	r24, r24
 148:	88 0f       	add	r24, r24
	uint8_t a7Val = !getBit(PIND, PIND7);
	startValue=setBit(a5Val,0,startValue);
	startValue=setBit(a6Val,1,startValue);
	startValue=setBit(a7Val,2,startValue);
	return startValue;
}
 14a:	82 2b       	or	r24, r18
 14c:	08 95       	ret

0000014e <__vector_5>:
	//running=0;
	//counter = startValue;
	//setLEDs(counter);
//}

ISR(PCINT2_vect){
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
	//PORTB^=(1<<PORTB3);
	counter = startValue;
 15a:	80 91 04 01 	lds	r24, 0x0104
 15e:	80 93 00 01 	sts	0x0100, r24
}
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_16>:

ISR(TIMER0_OVF_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	static uint16_t counter = 0;
	TCNT0 = 6;
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	86 bd       	out	0x26, r24	; 38
	counter++;
 198:	c0 91 02 01 	lds	r28, 0x0102
 19c:	d0 91 03 01 	lds	r29, 0x0103
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	d0 93 03 01 	sts	0x0103, r29
 1a6:	c0 93 02 01 	sts	0x0102, r28
	if (counter%50==0){
 1aa:	9e 01       	movw	r18, r28
 1ac:	36 95       	lsr	r19
 1ae:	27 95       	ror	r18
 1b0:	ab e7       	ldi	r26, 0x7B	; 123
 1b2:	b4 e1       	ldi	r27, 0x14	; 20
 1b4:	0e 94 98 01 	call	0x330	; 0x330 <__umulhisi3>
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	42 e3       	ldi	r20, 0x32	; 50
 1be:	48 9f       	mul	r20, r24
 1c0:	90 01       	movw	r18, r0
 1c2:	49 9f       	mul	r20, r25
 1c4:	30 0d       	add	r19, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	c2 17       	cp	r28, r18
 1ca:	d3 07       	cpc	r29, r19
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <__vector_16+0x68>
		setEvent(EVENT_50MS);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
	}
	if (counter == 1000){
 1d6:	c8 3e       	cpi	r28, 0xE8	; 232
 1d8:	d3 40       	sbci	r29, 0x03	; 3
 1da:	41 f4       	brne	.+16     	; 0x1ec <__vector_16+0x7e>
		setEvent(EVENT_1000MS);
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
		counter = 0;
 1e4:	10 92 03 01 	sts	0x0103, r1
 1e8:	10 92 02 01 	sts	0x0102, r1
	}
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <main>:



int main(void)
{
	DDRB|=(1<<DDB0);
 212:	20 9a       	sbi	0x04, 0	; 4
	DDRB|=(1<<DDB1);
 214:	21 9a       	sbi	0x04, 1	; 4
	DDRB|=(1<<DDB2);
 216:	22 9a       	sbi	0x04, 2	; 4
	DDRB|=(1<<DDB3); //LED for debugging
 218:	23 9a       	sbi	0x04, 3	; 4
	DDRD = setBit(1, PORTD4, DDRD); //set sw interrupt port -> outport
 21a:	54 9a       	sbi	0x0a, 4	; 10
	PORTC|=(1<<DDC3); //pullup widerstand 1
 21c:	43 9a       	sbi	0x08, 3	; 8
	PORTD|=(1<<DDD5); //pullup widerstand 2
 21e:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD|=(1<<DDD6); //pullup widerstand 3
 220:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD|=(1<<DDD7); //pullup widerstand 4
 222:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD|=(1<<DDD2); //pullup
 224:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<DDD3); //pullup
 226:	5b 9a       	sbi	0x0b, 3	; 11
	
	
	PORTB|=(1<<PORTB0); //led default off
 228:	28 9a       	sbi	0x05, 0	; 5
	PORTB|=(1<<PORTB1);	//led default off
 22a:	29 9a       	sbi	0x05, 1	; 5
	PORTB|=(1<<PORTB2);	//led default off
 22c:	2a 9a       	sbi	0x05, 2	; 5
	PORTB|=(0<<PORTB3);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	85 b9       	out	0x05, r24	; 5
	
	//EICRA = setBit(0, ISC00, EICRA); //int0
	//EICRA = setBit(1, ISC01, EICRA); //int 0
	//EIMSK = setBit(1, INT0, EIMSK); //int 0
	//PCICR = setBit(1, PCIE1, PCICR); //pcint1
	PCICR = setBit(1, PCIE2, PCICR); //pcint2 (sw interrupt)
 232:	e8 e6       	ldi	r30, 0x68	; 104
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 238:	84 60       	ori	r24, 0x04	; 4
	
	//EICRA = setBit(0, ISC00, EICRA); //int0
	//EICRA = setBit(1, ISC01, EICRA); //int 0
	//EIMSK = setBit(1, INT0, EIMSK); //int 0
	//PCICR = setBit(1, PCIE1, PCICR); //pcint1
	PCICR = setBit(1, PCIE2, PCICR); //pcint2 (sw interrupt)
 23a:	80 83       	st	Z, r24
	//PCMSK1 = setBit(1, PCINT11, PCMSK1); //pcint1 / a4
	
	PCMSK2 = setBit(1, PCINT20, PCMSK2); //sw interrupt
 23c:	ed e6       	ldi	r30, 0x6D	; 109
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
volatile uint8_t startValue = 0;
volatile uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
 242:	80 61       	ori	r24, 0x10	; 16
	//EIMSK = setBit(1, INT0, EIMSK); //int 0
	//PCICR = setBit(1, PCIE1, PCICR); //pcint1
	PCICR = setBit(1, PCIE2, PCICR); //pcint2 (sw interrupt)
	//PCMSK1 = setBit(1, PCINT11, PCMSK1); //pcint1 / a4
	
	PCMSK2 = setBit(1, PCINT20, PCMSK2); //sw interrupt
 244:	80 83       	st	Z, r24
	
	TCNT0 = 6; //timer
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	86 bd       	out	0x26, r24	; 38
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 24a:	85 b5       	in	r24, 0x25	; 37
 24c:	88 7f       	andi	r24, 0xF8	; 248
 24e:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01)|(1<<CS00);
 250:	85 b5       	in	r24, 0x25	; 37
 252:	83 60       	ori	r24, 0x03	; 3
 254:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
 256:	ee e6       	ldi	r30, 0x6E	; 110
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	80 83       	st	Z, r24
	
	sei(); //enable global interrupt
 260:	78 94       	sei
	
	startValue = setStartValue();
 262:	0e 94 8a 00 	call	0x114	; 0x114 <setStartValue>
 266:	80 93 04 01 	sts	0x0104, r24
	counter = startValue;
 26a:	80 91 04 01 	lds	r24, 0x0104
 26e:	80 93 00 01 	sts	0x0100, r24
	{
		if(eventIsSet(EVENT_50MS)){
			valueD2 = getBit(PIND,PIND2);
			if( valueD2 && prevValueD2==0 ){
				//start
				running=1;
 272:	ff 24       	eor	r15, r15
 274:	f3 94       	inc	r15
				counter = startValue;
				PORTB ^= (1<<PORTB3);
 276:	08 e0       	ldi	r16, 0x08	; 8
			if(running){
				setLEDs(counter);
				if(counter == 0){
					//counter = startValue;
					//trigger sw interrupt
					PORTD^=1<<PORTD4;
 278:	68 94       	set
 27a:	ee 24       	eor	r14, r14
 27c:	e4 f8       	bld	r14, 4
}

int eventIsSet(event_type ev){
	return (events&ev);
 27e:	80 91 05 01 	lds	r24, 0x0105
 282:	90 91 06 01 	lds	r25, 0x0106
	startValue = setStartValue();
	counter = startValue;
	uint8_t prevValueD2,valueD2,prevValueD3,valueD3;
	while(1)
	{
		if(eventIsSet(EVENT_50MS)){
 286:	80 ff       	sbrs	r24, 0
 288:	29 c0       	rjmp	.+82     	; 0x2dc <main+0xca>
			valueD2 = getBit(PIND,PIND2);
 28a:	c9 b1       	in	r28, 0x09	; 9
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
 28c:	c2 fb       	bst	r28, 2
 28e:	cc 27       	eor	r28, r28
 290:	c0 f9       	bld	r28, 0
	uint8_t prevValueD2,valueD2,prevValueD3,valueD3;
	while(1)
	{
		if(eventIsSet(EVENT_50MS)){
			valueD2 = getBit(PIND,PIND2);
			if( valueD2 && prevValueD2==0 ){
 292:	cc 23       	and	r28, r28
 294:	59 f0       	breq	.+22     	; 0x2ac <main+0x9a>
 296:	d1 11       	cpse	r29, r1
 298:	09 c0       	rjmp	.+18     	; 0x2ac <main+0x9a>
				//start
				running=1;
 29a:	f0 92 01 01 	sts	0x0101, r15
				counter = startValue;
 29e:	80 91 04 01 	lds	r24, 0x0104
 2a2:	80 93 00 01 	sts	0x0100, r24
				PORTB ^= (1<<PORTB3);
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	80 27       	eor	r24, r16
 2aa:	85 b9       	out	0x05, r24	; 5
			}
			prevValueD2=valueD2;
			
			valueD3 = getBit(PIND,PIND3);
 2ac:	d9 b1       	in	r29, 0x09	; 9
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
 2ae:	d3 fb       	bst	r29, 3
 2b0:	dd 27       	eor	r29, r29
 2b2:	d0 f9       	bld	r29, 0
				PORTB ^= (1<<PORTB3);
			}
			prevValueD2=valueD2;
			
			valueD3 = getBit(PIND,PIND3);
			if( valueD3 && prevValueD3==0 ){
 2b4:	dd 23       	and	r29, r29
 2b6:	61 f0       	breq	.+24     	; 0x2d0 <main+0xbe>
 2b8:	11 11       	cpse	r17, r1
 2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <main+0xbe>
				//stop
				running=0;
 2bc:	10 92 01 01 	sts	0x0101, r1
				counter = startValue;
 2c0:	80 91 04 01 	lds	r24, 0x0104
 2c4:	80 93 00 01 	sts	0x0100, r24
				setLEDs(counter);
 2c8:	80 91 00 01 	lds	r24, 0x0100
 2cc:	0e 94 71 00 	call	0xe2	; 0xe2 <setLEDs>
			}
			prevValueD3=valueD3;
			clearEvent(EVENT_50MS);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 61 00 	call	0xc2	; 0xc2 <clearEvent>
				//stop
				running=0;
				counter = startValue;
				setLEDs(counter);
			}
			prevValueD3=valueD3;
 2d8:	1d 2f       	mov	r17, r29
				//start
				running=1;
				counter = startValue;
				PORTB ^= (1<<PORTB3);
			}
			prevValueD2=valueD2;
 2da:	dc 2f       	mov	r29, r28
 2dc:	80 91 05 01 	lds	r24, 0x0105
 2e0:	90 91 06 01 	lds	r25, 0x0106
			}
			prevValueD3=valueD3;
			clearEvent(EVENT_50MS);
			
		}
		if(eventIsSet(EVENT_1000MS)){
 2e4:	81 ff       	sbrs	r24, 1
 2e6:	1d c0       	rjmp	.+58     	; 0x322 <main+0x110>
			startValue = setStartValue();
 2e8:	0e 94 8a 00 	call	0x114	; 0x114 <setStartValue>
 2ec:	80 93 04 01 	sts	0x0104, r24
			if(running){
 2f0:	80 91 01 01 	lds	r24, 0x0101
 2f4:	88 23       	and	r24, r24
 2f6:	89 f0       	breq	.+34     	; 0x31a <main+0x108>
				setLEDs(counter);
 2f8:	80 91 00 01 	lds	r24, 0x0100
 2fc:	0e 94 71 00 	call	0xe2	; 0xe2 <setLEDs>
				if(counter == 0){
 300:	80 91 00 01 	lds	r24, 0x0100
 304:	81 11       	cpse	r24, r1
 306:	04 c0       	rjmp	.+8      	; 0x310 <main+0xfe>
					//counter = startValue;
					//trigger sw interrupt
					PORTD^=1<<PORTD4;
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	8e 25       	eor	r24, r14
 30c:	8b b9       	out	0x0b, r24	; 11
 30e:	05 c0       	rjmp	.+10     	; 0x31a <main+0x108>
					//nop
					//nop
					//nop
					//}
					}else{
					counter--;
 310:	80 91 00 01 	lds	r24, 0x0100
 314:	81 50       	subi	r24, 0x01	; 1
 316:	80 93 00 01 	sts	0x0100, r24
					
				}
			}
			clearEvent(EVENT_1000MS);
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 61 00 	call	0xc2	; 0xc2 <clearEvent>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	8f e3       	ldi	r24, 0x3F	; 63
 324:	9c e9       	ldi	r25, 0x9C	; 156
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x114>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x11a>
 32c:	00 00       	nop
 32e:	a7 cf       	rjmp	.-178    	; 0x27e <main+0x6c>

00000330 <__umulhisi3>:
 330:	a2 9f       	mul	r26, r18
 332:	b0 01       	movw	r22, r0
 334:	b3 9f       	mul	r27, r19
 336:	c0 01       	movw	r24, r0
 338:	a3 9f       	mul	r26, r19
 33a:	70 0d       	add	r23, r0
 33c:	81 1d       	adc	r24, r1
 33e:	11 24       	eor	r1, r1
 340:	91 1d       	adc	r25, r1
 342:	b2 9f       	mul	r27, r18
 344:	70 0d       	add	r23, r0
 346:	81 1d       	adc	r24, r1
 348:	11 24       	eor	r1, r1
 34a:	91 1d       	adc	r25, r1
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
