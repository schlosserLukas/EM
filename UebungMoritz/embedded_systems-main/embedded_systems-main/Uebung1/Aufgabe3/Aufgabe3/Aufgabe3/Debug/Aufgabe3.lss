
Aufgabe3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000041b  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b8  00000000  00000000  00000677  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d6  00000000  00000000  0000082f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001f3  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000353  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  78:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setLEDs>:
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  80:	28 2f       	mov	r18, r24
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	a9 01       	movw	r20, r18
  86:	55 95       	asr	r21
  88:	47 95       	ror	r20
  8a:	55 95       	asr	r21
  8c:	47 95       	ror	r20
}
void setLEDs(uint8_t counter){
	if(getBit(counter,2)){
  8e:	40 ff       	sbrs	r20, 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <setLEDs+0x16>
		PORTB=setBit(0,PORTB0,PORTB);
  92:	28 98       	cbi	0x05, 0	; 5
  94:	01 c0       	rjmp	.+2      	; 0x98 <setLEDs+0x18>
	}
	else{
		PORTB|=(1<<PORTB0);
  96:	28 9a       	sbi	0x05, 0	; 5
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  98:	35 95       	asr	r19
  9a:	27 95       	ror	r18
		PORTB=setBit(0,PORTB0,PORTB);
	}
	else{
		PORTB|=(1<<PORTB0);
	}
	if(getBit(counter,1)){
  9c:	20 ff       	sbrs	r18, 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <setLEDs+0x24>
		PORTB=setBit(0,PORTB1,PORTB);
  a0:	29 98       	cbi	0x05, 1	; 5
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <setLEDs+0x26>
	}
	else{
		PORTB|=(1<<PORTB1);
  a4:	29 9a       	sbi	0x05, 1	; 5
	}
	if(getBit(counter,0)){
  a6:	80 ff       	sbrs	r24, 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <setLEDs+0x2e>
		PORTB=setBit(0,PORTB2,PORTB);
  aa:	2a 98       	cbi	0x05, 2	; 5
  ac:	08 95       	ret
	}
	else{
		PORTB|=(1<<PORTB2);
  ae:	2a 9a       	sbi	0x05, 2	; 5
  b0:	08 95       	ret

000000b2 <setStartValue>:
	}
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND2);
  b2:	89 b1       	in	r24, 0x09	; 9
	uint8_t a6Val = !getBit(PIND, PIND3);
  b4:	79 b1       	in	r23, 0x09	; 9
	uint8_t a7Val = !getBit(PIND, PIND4);
  b6:	69 b1       	in	r22, 0x09	; 9
	}
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND2);
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	82 fb       	bst	r24, 2
  bc:	88 27       	eor	r24, r24
  be:	80 f9       	bld	r24, 0
#include <avr/io.h>
#include <util/delay.h>

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
  c0:	89 27       	eor	r24, r25
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  c2:	76 95       	lsr	r23
  c4:	76 95       	lsr	r23
  c6:	76 95       	lsr	r23
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND2);
	uint8_t a6Val = !getBit(PIND, PIND3);
  c8:	79 27       	eor	r23, r25
  ca:	47 2f       	mov	r20, r23
  cc:	41 70       	andi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	48 2b       	or	r20, r24
  d6:	84 2f       	mov	r24, r20
  d8:	8b 7f       	andi	r24, 0xFB	; 251
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
  da:	46 2f       	mov	r20, r22
  dc:	42 95       	swap	r20
  de:	4f 70       	andi	r20, 0x0F	; 15

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND2);
	uint8_t a6Val = !getBit(PIND, PIND3);
	uint8_t a7Val = !getBit(PIND, PIND4);
  e0:	94 27       	eor	r25, r20
  e2:	29 2f       	mov	r18, r25
  e4:	21 70       	andi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	var = (var & ~(1UL << index)) | (value << index); // starts counting at position 0
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
	uint8_t a7Val = !getBit(PIND, PIND4);
	startValue=setBit(a5Val,0,startValue);
	startValue=setBit(a6Val,1,startValue);
	startValue=setBit(a7Val,2,startValue);
	return startValue;
}
  f0:	82 2b       	or	r24, r18
  f2:	08 95       	ret

000000f4 <main>:
{
	uint8_t counter = 7;
	counter|=1;
	counter|=1<<1;
	counter |= 1<<2;
	DDRB|=(1<<DDB0);
  f4:	20 9a       	sbi	0x04, 0	; 4
	DDRB|=(1<<DDB1);
  f6:	21 9a       	sbi	0x04, 1	; 4
	DDRB|=(1<<DDB2);
  f8:	22 9a       	sbi	0x04, 2	; 4
	PORTD|=(1<<DDD0); //pullup widerstand 0
  fa:	58 9a       	sbi	0x0b, 0	; 11
	PORTD|=(1<<DDD1); //pullup widerstand 1
  fc:	59 9a       	sbi	0x0b, 1	; 11
	PORTD|=(1<<DDD2); //pullup widerstand 2
  fe:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<DDD3); //pullup widerstand 3
 100:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD|=(1<<DDD4); //pullup widerstand 4
 102:	5c 9a       	sbi	0x0b, 4	; 11
	PORTB|=(1<<PORTB0);
 104:	28 9a       	sbi	0x05, 0	; 5
	PORTB|=(1<<PORTB1);
 106:	29 9a       	sbi	0x05, 1	; 5
	PORTB|=(1<<PORTB2);
 108:	2a 9a       	sbi	0x05, 2	; 5
	
	uint8_t delayCounter, a3Val, prevA3Val, a4Val, prevA4Val = 0, a5Val, a6Val, a7Val;
	uint8_t startValue =setStartValue();
 10a:	0e 94 59 00 	call	0xb2	; 0xb2 <setStartValue>
 10e:	18 2f       	mov	r17, r24
	uint8_t running=1;
 110:	dd 24       	eor	r13, r13
 112:	d3 94       	inc	r13
	PORTD|=(1<<DDD4); //pullup widerstand 4
	PORTB|=(1<<PORTB0);
	PORTB|=(1<<PORTB1);
	PORTB|=(1<<PORTB2);
	
	uint8_t delayCounter, a3Val, prevA3Val, a4Val, prevA4Val = 0, a5Val, a6Val, a7Val;
 114:	00 e0       	ldi	r16, 0x00	; 0
int main(void)
{
	uint8_t counter = 7;
	counter|=1;
	counter|=1<<1;
	counter |= 1<<2;
 116:	0f 2e       	mov	r0, r31
 118:	f7 e0       	ldi	r31, 0x07	; 7
 11a:	cf 2e       	mov	r12, r31
 11c:	f0 2d       	mov	r31, r0
	uint8_t running=1;
	while(1)
	{
		a3Val= getBit(PIND,PIND0);
		if(a3Val && !prevA3Val){
			running=0;
 11e:	a1 2c       	mov	r10, r1
			setLEDs(counter);
		}
		prevA3Val=a3Val;
		a4Val = getBit(PIND,PIND1);
		if(a4Val && !prevA4Val){
			running=1;
 120:	bb 24       	eor	r11, r11
 122:	b3 94       	inc	r11
	uint8_t delayCounter, a3Val, prevA3Val, a4Val, prevA4Val = 0, a5Val, a6Val, a7Val;
	uint8_t startValue =setStartValue();
	uint8_t running=1;
	while(1)
	{
		a3Val= getBit(PIND,PIND0);
 124:	99 b1       	in	r25, 0x09	; 9
		if(a3Val && !prevA3Val){
 126:	d9 2f       	mov	r29, r25
 128:	d1 70       	andi	r29, 0x01	; 1
 12a:	90 ff       	sbrs	r25, 0
 12c:	07 c0       	rjmp	.+14     	; 0x13c <main+0x48>
 12e:	f1 10       	cpse	r15, r1
 130:	05 c0       	rjmp	.+10     	; 0x13c <main+0x48>
			running=0;
			counter = startValue;
			setLEDs(counter);
 132:	81 2f       	mov	r24, r17
 134:	0e 94 40 00 	call	0x80	; 0x80 <setLEDs>
	while(1)
	{
		a3Val= getBit(PIND,PIND0);
		if(a3Val && !prevA3Val){
			running=0;
			counter = startValue;
 138:	c1 2e       	mov	r12, r17
	uint8_t running=1;
	while(1)
	{
		a3Val= getBit(PIND,PIND0);
		if(a3Val && !prevA3Val){
			running=0;
 13a:	da 2c       	mov	r13, r10
			counter = startValue;
			setLEDs(counter);
		}
		prevA3Val=a3Val;
		a4Val = getBit(PIND,PIND1);
 13c:	c9 b1       	in	r28, 0x09	; 9
	return var;
}

uint8_t getBit(uint8_t var, uint8_t index)
{
	return ((var >> index) & 1);
 13e:	c6 95       	lsr	r28
 140:	c1 70       	andi	r28, 0x01	; 1
			counter = startValue;
			setLEDs(counter);
		}
		prevA3Val=a3Val;
		a4Val = getBit(PIND,PIND1);
		if(a4Val && !prevA4Val){
 142:	11 f0       	breq	.+4      	; 0x148 <main+0x54>
 144:	00 23       	and	r16, r16
 146:	01 f1       	breq	.+64     	; 0x188 <main+0x94>
			running=1;
			counter = startValue;
		}
		prevA4Val=a4Val;
		startValue = setStartValue();
 148:	0e 94 59 00 	call	0xb2	; 0xb2 <setStartValue>
 14c:	18 2f       	mov	r17, r24
		if(running){
 14e:	dd 20       	and	r13, r13
 150:	79 f0       	breq	.+30     	; 0x170 <main+0x7c>
				if(delayCounter == 9 ){
 152:	29 e0       	ldi	r18, 0x09	; 9
 154:	e2 12       	cpse	r14, r18
 156:	08 c0       	rjmp	.+16     	; 0x168 <main+0x74>
					setLEDs(counter);
 158:	8c 2d       	mov	r24, r12
 15a:	0e 94 40 00 	call	0x80	; 0x80 <setLEDs>
					if(counter == 0){
 15e:	cc 20       	and	r12, r12
 160:	29 f0       	breq	.+10     	; 0x16c <main+0x78>
						counter = startValue;
						}else{
						counter--;
 162:	ca 94       	dec	r12
					}
					delayCounter=0;
 164:	ea 2c       	mov	r14, r10
 166:	04 c0       	rjmp	.+8      	; 0x170 <main+0x7c>
					
					}else{
					delayCounter++;
 168:	e3 94       	inc	r14
 16a:	02 c0       	rjmp	.+4      	; 0x170 <main+0x7c>
 16c:	c1 2e       	mov	r12, r17
					if(counter == 0){
						counter = startValue;
						}else{
						counter--;
					}
					delayCounter=0;
 16e:	ea 2c       	mov	r14, r10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	91 ee       	ldi	r25, 0xE1	; 225
 174:	24 e0       	ldi	r18, 0x04	; 4
 176:	81 50       	subi	r24, 0x01	; 1
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	20 40       	sbci	r18, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x82>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x8c>
 180:	00 00       	nop
		if(a3Val && !prevA3Val){
			running=0;
			counter = startValue;
			setLEDs(counter);
		}
		prevA3Val=a3Val;
 182:	fd 2e       	mov	r15, r29
		a4Val = getBit(PIND,PIND1);
		if(a4Val && !prevA4Val){
			running=1;
			counter = startValue;
		}
		prevA4Val=a4Val;
 184:	0c 2f       	mov	r16, r28
 186:	ce cf       	rjmp	.-100    	; 0x124 <main+0x30>
		startValue = setStartValue();
 188:	0e 94 59 00 	call	0xb2	; 0xb2 <setStartValue>
		}
		prevA3Val=a3Val;
		a4Val = getBit(PIND,PIND1);
		if(a4Val && !prevA4Val){
			running=1;
			counter = startValue;
 18c:	c1 2e       	mov	r12, r17
		}
		prevA4Val=a4Val;
		startValue = setStartValue();
 18e:	18 2f       	mov	r17, r24
			setLEDs(counter);
		}
		prevA3Val=a3Val;
		a4Val = getBit(PIND,PIND1);
		if(a4Val && !prevA4Val){
			running=1;
 190:	db 2c       	mov	r13, r11
 192:	df cf       	rjmp	.-66     	; 0x152 <main+0x5e>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
