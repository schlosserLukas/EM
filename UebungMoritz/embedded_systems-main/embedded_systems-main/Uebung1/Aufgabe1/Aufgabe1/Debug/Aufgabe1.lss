
Aufgabe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001cd  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000129  00000000  00000000  00000353  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000165  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000182  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d2  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	uint8_t counter = 7;
	counter|=1;
	counter|=1<<1;
	counter |= 1<<2;
	DDRB|=(1<<DDB0);
  80:	20 9a       	sbi	0x04, 0	; 4
	DDRB|=(1<<DDB1);
  82:	21 9a       	sbi	0x04, 1	; 4
	DDRB|=(1<<DDB2);
  84:	22 9a       	sbi	0x04, 2	; 4
	PORTB|=(0<<PORTB0);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	85 b9       	out	0x05, r24	; 5
	PORTB|=(1<<PORTB1);
  8a:	29 9a       	sbi	0x05, 1	; 5
	PORTB|=(1<<PORTB2);
  8c:	2a 9a       	sbi	0x05, 2	; 5
int main(void)
{
	uint8_t counter = 7;
	counter|=1;
	counter|=1<<1;
	counter |= 1<<2;
  8e:	87 e0       	ldi	r24, 0x07	; 7
		else{
			PORTB|=(1<<PORTB2);
		}
		
		if(counter == 0){
			counter = 7;
  90:	97 e0       	ldi	r25, 0x07	; 7
	PORTB|=(0<<PORTB0);
	PORTB|=(1<<PORTB1);
	PORTB|=(1<<PORTB2);
	while(1)
	{
		if(getBit(counter,2)){
  92:	82 ff       	sbrs	r24, 2
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x1a>
			PORTB=setBit(0,PORTB0,PORTB);
  96:	28 98       	cbi	0x05, 0	; 5
  98:	01 c0       	rjmp	.+2      	; 0x9c <main+0x1c>
		}
		else{
			PORTB|=(1<<PORTB0);
  9a:	28 9a       	sbi	0x05, 0	; 5
		}
		if(getBit(counter,1)){
  9c:	81 ff       	sbrs	r24, 1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x24>
			PORTB=setBit(0,PORTB1,PORTB);
  a0:	29 98       	cbi	0x05, 1	; 5
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <main+0x26>
		}
		else{
			PORTB|=(1<<PORTB1);
  a4:	29 9a       	sbi	0x05, 1	; 5
		}
		if(getBit(counter,0)){
  a6:	80 ff       	sbrs	r24, 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x2e>
			PORTB=setBit(0,PORTB2,PORTB);
  aa:	2a 98       	cbi	0x05, 2	; 5
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x30>
		}
		else{
			PORTB|=(1<<PORTB2);
  ae:	2a 9a       	sbi	0x05, 2	; 5
		}
		
		if(counter == 0){
  b0:	88 23       	and	r24, r24
  b2:	11 f0       	breq	.+4      	; 0xb8 <main+0x38>
			counter = 7;
		}else{
				counter--;
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x3a>
		else{
			PORTB|=(1<<PORTB2);
		}
		
		if(counter == 0){
			counter = 7;
  b8:	89 2f       	mov	r24, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	33 ed       	ldi	r19, 0xD3	; 211
  be:	40 e3       	ldi	r20, 0x30	; 48
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
  cc:	e2 cf       	rjmp	.-60     	; 0x92 <main+0x12>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
