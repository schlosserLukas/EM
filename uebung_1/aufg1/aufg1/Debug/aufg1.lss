
aufg1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001c8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000421  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001dd  00000000  00000000  000006cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d1  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d8  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d4  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  8e:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setLEDs>:
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  96:	28 2f       	mov	r18, r24
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	a9 01       	movw	r20, r18
  9c:	55 95       	asr	r21
  9e:	47 95       	ror	r20
  a0:	55 95       	asr	r21
  a2:	47 95       	ror	r20
}

void setLEDs(uint8_t counter){
	if(getBit(counter, 2)){
  a4:	40 ff       	sbrs	r20, 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <setLEDs+0x16>
		PORTD = setBit(0,PORTD0,PORTD);
  a8:	58 98       	cbi	0x0b, 0	; 11
  aa:	01 c0       	rjmp	.+2      	; 0xae <setLEDs+0x18>
	}
	else{
		PORTD|=(1<<PORTD0);
  ac:	58 9a       	sbi	0x0b, 0	; 11
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  ae:	35 95       	asr	r19
  b0:	27 95       	ror	r18
		PORTD = setBit(0,PORTD0,PORTD);
	}
	else{
		PORTD|=(1<<PORTD0);
	}
	if(getBit(counter,1)){
  b2:	20 ff       	sbrs	r18, 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <setLEDs+0x24>
		PORTD = setBit(0, PORTD1, PORTD);
  b6:	59 98       	cbi	0x0b, 1	; 11
  b8:	01 c0       	rjmp	.+2      	; 0xbc <setLEDs+0x26>
	}
	else{
		PORTD|=(1<<PORTD1);
  ba:	59 9a       	sbi	0x0b, 1	; 11
	}
	if(getBit(counter,0)){
  bc:	80 ff       	sbrs	r24, 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <setLEDs+0x2e>
		PORTD = setBit(0, PORTD6, PORTD);
  c0:	5e 98       	cbi	0x0b, 6	; 11
  c2:	08 95       	ret
	}
	else{
		PORTD|=(1<<PORTD6);
  c4:	5e 9a       	sbi	0x0b, 6	; 11
  c6:	08 95       	ret

000000c8 <setStartValue>:
	
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
  c8:	89 b1       	in	r24, 0x09	; 9
	uint8_t a6Val = !getBit(PIND, PIND3);
  ca:	79 b1       	in	r23, 0x09	; 9
	uint8_t a7Val = !getBit(PIND, PIND4);
  cc:	69 b1       	in	r22, 0x09	; 9
	
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	85 fb       	bst	r24, 5
  d2:	88 27       	eor	r24, r24
  d4:	80 f9       	bld	r24, 0
uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
  d6:	89 27       	eor	r24, r25
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  d8:	76 95       	lsr	r23
  da:	76 95       	lsr	r23
  dc:	76 95       	lsr	r23
}

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
  de:	79 27       	eor	r23, r25
  e0:	47 2f       	mov	r20, r23
  e2:	41 70       	andi	r20, 0x01	; 1
  e4:	50 e0       	ldi	r21, 0x00	; 0
uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
  e6:	44 0f       	add	r20, r20
  e8:	55 1f       	adc	r21, r21
  ea:	48 2b       	or	r20, r24
  ec:	84 2f       	mov	r24, r20
  ee:	8b 7f       	andi	r24, 0xFB	; 251
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
  f0:	46 2f       	mov	r20, r22
  f2:	42 95       	swap	r20
  f4:	4f 70       	andi	r20, 0x0F	; 15

uint8_t setStartValue(){
	uint8_t startValue;
	uint8_t a5Val = !getBit(PIND, PIND5);
	uint8_t a6Val = !getBit(PIND, PIND3);
	uint8_t a7Val = !getBit(PIND, PIND4);
  f6:	94 27       	eor	r25, r20
  f8:	29 2f       	mov	r18, r25
  fa:	21 70       	andi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
uint8_t counter = 7;

uint8_t setBit(uint8_t value, uint8_t index, uint8_t var)
{
	
	var= (var &~(1UL <<index)) | (value << index); //starts counting at position 0
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
	uint8_t a7Val = !getBit(PIND, PIND4);
	startValue=setBit(a5Val,0,startValue);
	startValue=setBit(a6Val,1,startValue);
	startValue=setBit(a7Val,2,startValue);
	return startValue;
}
 106:	82 2b       	or	r24, r18
 108:	08 95       	ret

0000010a <main>:
int main(void)
{
	
	counter|=1;
	counter|=1<<1;
	counter|=1<<2;
 10a:	80 91 00 01 	lds	r24, 0x0100
 10e:	87 60       	ori	r24, 0x07	; 7
 110:	80 93 00 01 	sts	0x0100, r24
	DDRD|=(1<<DDD0);//LED A1
 114:	50 9a       	sbi	0x0a, 0	; 10
	DDRD|=(1<<DDD1);//LED A4
 116:	51 9a       	sbi	0x0a, 1	; 10
	DDRD|=(1<<DDD6);//LED A7
 118:	56 9a       	sbi	0x0a, 6	; 10
	PORTD|=(1<<DDD5);//pullup widerstand 0
 11a:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD|=(1<<DDD3);//pullup widerstand 1
 11c:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD|=(1<<DDD4);//pullup widerstand 2
 11e:	5c 9a       	sbi	0x0b, 4	; 11
	PORTB|=(1<<DDB0);//pullup widerstand 3 fuer Taster a3
 120:	28 9a       	sbi	0x05, 0	; 5
	PORTD|=(1<<DDD2);//pullup widerstand 4 fuer Taster a4
 122:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PORTD0);
 124:	58 9a       	sbi	0x0b, 0	; 11
	PORTD|=(1<<PORTD1),
 126:	59 9a       	sbi	0x0b, 1	; 11
	PORTD|=(1<<PORTD6);
 128:	5e 9a       	sbi	0x0b, 6	; 11
	
	
	uint8_t running = 1;
	uint8_t startValue = 0;
	
	startValue = setStartValue();
 12a:	0e 94 64 00 	call	0xc8	; 0xc8 <setStartValue>
 12e:	18 2f       	mov	r17, r24
	uint8_t delayCounter, a3Val = 0, prevA3Val, a5Val, a6Val, a7Val, a4Val = 0, prevA4Val;
	counter = 7;
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	80 93 00 01 	sts	0x0100, r24
	PORTD|=(1<<PORTD0);
	PORTD|=(1<<PORTD1),
	PORTD|=(1<<PORTD6);
	
	
	uint8_t running = 1;
 136:	dd 24       	eor	r13, r13
 138:	d3 94       	inc	r13
	
	while(1)
	{
		a3Val = getBit(PINB, PINB0);
		if(a3Val && !prevA3Val){
			running = 0;
 13a:	b1 2c       	mov	r11, r1
		}
		prevA3Val = a3Val;
		
		a4Val = getBit(PIND, PIND2);
		if(a4Val && !prevA4Val){
			running = 1;
 13c:	cc 24       	eor	r12, r12
 13e:	c3 94       	inc	r12
	uint8_t delayCounter, a3Val = 0, prevA3Val, a5Val, a6Val, a7Val, a4Val = 0, prevA4Val;
	counter = 7;
	
	while(1)
	{
		a3Val = getBit(PINB, PINB0);
 140:	93 b1       	in	r25, 0x03	; 3
		if(a3Val && !prevA3Val){
 142:	d9 2f       	mov	r29, r25
 144:	d1 70       	andi	r29, 0x01	; 1
 146:	90 ff       	sbrs	r25, 0
 148:	08 c0       	rjmp	.+16     	; 0x15a <main+0x50>
 14a:	01 11       	cpse	r16, r1
 14c:	06 c0       	rjmp	.+12     	; 0x15a <main+0x50>
			running = 0;
			counter = startValue;
 14e:	10 93 00 01 	sts	0x0100, r17
			setLEDs(counter);
 152:	81 2f       	mov	r24, r17
 154:	0e 94 4b 00 	call	0x96	; 0x96 <setLEDs>
	
	while(1)
	{
		a3Val = getBit(PINB, PINB0);
		if(a3Val && !prevA3Val){
			running = 0;
 158:	db 2c       	mov	r13, r11
			counter = startValue;
			setLEDs(counter);
		}
		prevA3Val = a3Val;
		
		a4Val = getBit(PIND, PIND2);
 15a:	c9 b1       	in	r28, 0x09	; 9
	return var;
}

uint8_t getBit(uint8_t var,uint8_t index)
{
	return((var >> index) & 1);
 15c:	c2 fb       	bst	r28, 2
 15e:	cc 27       	eor	r28, r28
 160:	c0 f9       	bld	r28, 0
			setLEDs(counter);
		}
		prevA3Val = a3Val;
		
		a4Val = getBit(PIND, PIND2);
		if(a4Val && !prevA4Val){
 162:	cc 23       	and	r28, r28
 164:	49 f0       	breq	.+18     	; 0x178 <main+0x6e>
 166:	f1 10       	cpse	r15, r1
 168:	07 c0       	rjmp	.+14     	; 0x178 <main+0x6e>
			running = 1;
			counter = startValue;
 16a:	10 93 00 01 	sts	0x0100, r17
			
		}
		prevA4Val = a4Val;
		startValue = setStartValue();
 16e:	0e 94 64 00 	call	0xc8	; 0xc8 <setStartValue>
 172:	18 2f       	mov	r17, r24
		}
		prevA3Val = a3Val;
		
		a4Val = getBit(PIND, PIND2);
		if(a4Val && !prevA4Val){
			running = 1;
 174:	dc 2c       	mov	r13, r12
 176:	05 c0       	rjmp	.+10     	; 0x182 <main+0x78>
			counter = startValue;
			
		}
		prevA4Val = a4Val;
		startValue = setStartValue();
 178:	0e 94 64 00 	call	0xc8	; 0xc8 <setStartValue>
 17c:	18 2f       	mov	r17, r24
		
		if(running){
 17e:	dd 20       	and	r13, r13
 180:	a9 f0       	breq	.+42     	; 0x1ac <main+0xa2>
			if(delayCounter == 9){
 182:	29 e0       	ldi	r18, 0x09	; 9
 184:	e2 12       	cpse	r14, r18
 186:	11 c0       	rjmp	.+34     	; 0x1aa <main+0xa0>
				setLEDs(counter);
 188:	80 91 00 01 	lds	r24, 0x0100
 18c:	0e 94 4b 00 	call	0x96	; 0x96 <setLEDs>
				if(counter == 0){
 190:	80 91 00 01 	lds	r24, 0x0100
 194:	81 11       	cpse	r24, r1
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <main+0x96>
					counter = startValue;
 198:	10 93 00 01 	sts	0x0100, r17
				}
				else{
					counter --;
				}
				delayCounter = 0;
 19c:	eb 2c       	mov	r14, r11
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <main+0xa2>
				setLEDs(counter);
				if(counter == 0){
					counter = startValue;
				}
				else{
					counter --;
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	80 93 00 01 	sts	0x0100, r24
				}
				delayCounter = 0;
 1a6:	eb 2c       	mov	r14, r11
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <main+0xa2>
			}
			else{
				delayCounter++;
 1aa:	e3 94       	inc	r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	91 ee       	ldi	r25, 0xE1	; 225
 1b0:	24 e0       	ldi	r18, 0x04	; 4
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0xa8>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0xb2>
 1bc:	00 00       	nop
		if(a3Val && !prevA3Val){
			running = 0;
			counter = startValue;
			setLEDs(counter);
		}
		prevA3Val = a3Val;
 1be:	0d 2f       	mov	r16, r29
		if(a4Val && !prevA4Val){
			running = 1;
			counter = startValue;
			
		}
		prevA4Val = a4Val;
 1c0:	fc 2e       	mov	r15, r28
 1c2:	be cf       	rjmp	.-132    	; 0x140 <main+0x36>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
